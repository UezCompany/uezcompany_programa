/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Servicos;

import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author renat
 */
public class GestaoServico extends javax.swing.JFrame {

    /**
     * Creates new form GestaoServico
     */
    public GestaoServico() {
        try {
            // Define o look and feel Nimbus
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        initComponents();
        atualizarListagemServicos();
    }

    private void atualizarListagemServicos() {
        try {
            // Defina a URL da API para obter os serviços
            String apiUrl = "http://uezapi.onrender.com/api/servicos";

            // Abra uma conexão HTTP
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Configurar a conexão para um método GET
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Authorization", "Bearer Renatchingaymuitolegal898989");

            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Ler a resposta JSON
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                // Processar a resposta JSON
                JSONArray jsonArray = new JSONArray(response.toString());

                // Obter o modelo de tabela
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                // Limpar todas as linhas existentes na tabela
                model.setRowCount(0);

                // Adicionar as linhas à tabela
                for (int i = 0; i < jsonArray.length(); i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    System.out.println(jsonObject);
                    String idServico = jsonObject.getString("_id");
                    String nomeServico = jsonObject.getString("nome");

                    // Obtenha o array de tipos e crie uma string com os tipos
                    JSONArray tipoArray = jsonObject.getJSONArray("tipo");
                    StringBuilder tipoServicoBuilder = new StringBuilder();

                    for (int j = 0; j < tipoArray.length(); j++) {
                        String tipo = tipoArray.getString(j);
                        tipoServicoBuilder.append(tipo);

                        // Adicione uma vírgula após cada tipo, exceto o último
                        if (j < tipoArray.length() - 1) {
                            tipoServicoBuilder.append(", ");
                        }
                    }

                    String tipoServico = tipoServicoBuilder.toString();
                    String categoriaServico = jsonObject.getString("categoria");

                    Object[] rowData = {
                        idServico,
                        nomeServico,
                        tipoServico,
                        categoriaServico
                    };
                    model.addRow(rowData);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao obter dados da API.", "Erro", JOptionPane.ERROR_MESSAGE);
            }

            // Fechar a conexão
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao obter dados da API.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnAtualizarlistagem1 = new javax.swing.JButton();
        btnAtualizarlistagem2 = new javax.swing.JButton();
        btnAtualizarlistagem3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Tipo", "Categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 71, 625, 397));

        btnAtualizarlistagem1.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        btnAtualizarlistagem1.setText("Atualizar listagem");
        btnAtualizarlistagem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarlistagem1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtualizarlistagem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 151, 150, -1));

        btnAtualizarlistagem2.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        btnAtualizarlistagem2.setText("Cadastrar Serviço");
        btnAtualizarlistagem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarlistagem2ActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtualizarlistagem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 71, 150, -1));

        btnAtualizarlistagem3.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        btnAtualizarlistagem3.setText("Remover Servico");
        btnAtualizarlistagem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarlistagem3ActionPerformed(evt);
            }
        });
        getContentPane().add(btnAtualizarlistagem3, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 111, 150, -1));

        jLabel1.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestão de Serviços");

        ImageIcon icon = new ImageIcon(getClass().getResource("../Imagem/fundoprograma2.png"));
        Image image = icon.getImage();
        jPanel1 = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
            }};

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(300, 300, 300)
                    .addComponent(jLabel1)
                    .addContainerGap(372, Short.MAX_VALUE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jLabel1)
                    .addContainerGap(447, Short.MAX_VALUE))
            );

            getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 850, 490));

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private void btnAtualizarlistagem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarlistagem1ActionPerformed
        atualizarListagemServicos();
    }//GEN-LAST:event_btnAtualizarlistagem1ActionPerformed

    private void btnAtualizarlistagem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarlistagem2ActionPerformed
        CadastroServico t = new CadastroServico();
        t.setVisible(true);
    }//GEN-LAST:event_btnAtualizarlistagem2ActionPerformed

    private void btnAtualizarlistagem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarlistagem3ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Nenhum Serviço selecionado.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String idServico = jTable1.getValueAt(selectedRow, 0).toString();

        try {
            // Defina a URL da API para excluir o serviço
            String apiUrl = "http://uezapi.onrender.com/api/funcionarios/servicos/" + idServico;

            // Abra uma conexão HTTP
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Configurar a conexão para um método DELETE
            connection.setRequestMethod("DELETE");
            connection.setRequestProperty("Authorization", "Bearer Renatchingaymuitolegal898989"); // Substitua com seu token

            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                JOptionPane.showMessageDialog(this, "Serviço excluído com sucesso.");

                // Atualizar a listagem de serviços após a exclusão
                atualizarListagemServicos();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir o serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
            }

            // Fechar a conexão
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao excluir o serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAtualizarlistagem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestaoServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestaoServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestaoServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestaoServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestaoServico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizarlistagem1;
    private javax.swing.JButton btnAtualizarlistagem2;
    private javax.swing.JButton btnAtualizarlistagem3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
